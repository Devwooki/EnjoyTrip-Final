lineStart() {
      kakao.maps.event.addListener(this.map, 'rightclick', function (mouseEvent) {

        // 마우스로 클릭한 위치
        let clickPosition = mouseEvent.latLng;

        // 지도 클릭이벤트가 발생했는데 선을 그리고있는 상태가 아니면
        if (!this.drawingFlag) {

          // 상태를 true로, 선이 그리고있는 상태로 변경합니다
          var drawFlag = true;
          this.drawingFlag = drawFlag
          // 지도 위에 선이 표시되고 있다면 지도에서 제거합니다
          this.deleteClickLine();

          // 지도 위에 커스텀오버레이가 표시되고 있다면 지도에서 제거합니다
          this.deleteDistnce();

          // 지도 위에 선을 그리기 위해 클릭한 지점과 해당 지점의 거리정보가 표시되고 있다면 지도에서 제거합니다
          this.deleteCircleDot();

          // 클릭한 위치를 기준으로 선을 생성하고 지도위에 표시합니다

          var clickLine = new kakao.maps.Polyline({
            map: this.map, // 선을 표시할 지도입니다
            path: [clickPosition], // 선을 구성하는 좌표 배열입니다 클릭한 위치를 넣어줍니다
            strokeWeight: 3, // 선의 두께입니다
            strokeColor: '#db4040', // 선의 색깔입니다
            strokeOpacity: 1, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
            strokeStyle: 'solid' // 선의 스타일입니다
          });
          this.clickLine = clickLine
          // 선이 그려지고 있을 때 마우스 움직임에 따라 선이 그려질 위치를 표시할 선을 생성합니다
          var moveLine = new kakao.maps.Polyline({
            strokeWeight: 3, // 선의 두께입니다
            strokeColor: '#db4040', // 선의 색깔입니다
            strokeOpacity: 0.5, // 선의 불투명도입니다 0에서 1 사이값이며 0에 가까울수록 투명합니다
            strokeStyle: 'solid' // 선의 스타일입니다
          });
          this.moveLine = moveLine;
          // 클릭한 지점에 대한 정보를 지도에 표시합니다
          this.displayCircleDot(clickPosition, 0);


        } else { // 선이 그려지고 있는 상태이면

          // 그려지고 있는 선의 좌표 배열을 얻어옵니다
          var path = this.clickLine.getPath();

          // 좌표 배열에 클릭한 위치를 추가합니다
          path.push(clickPosition);

          // 다시 선에 좌표 배열을 설정하여 클릭 위치까지 선을 그리도록 설정합니다
          this.clickLine.setPath(path);

          var distance = Math.round(this.clickLine.getLength());
          this.displayCircleDot(clickPosition, distance);
        }
      });
      // 지도에 마우스무브 이벤트를 등록합니다
      // 선을 그리고있는 상태에서 마우스무브 이벤트가 발생하면 그려질 선의 위치를 동적으로 보여주도록 합니다
      kakao.maps.event.addListener(this.map, 'mousemove', function (mouseEvent) {

        // 지도 마우스무브 이벤트가 발생했는데 선을 그리고있는 상태이면
        if (this.drawingFlag) {

          // 마우스 커서의 현재 위치를 얻어옵니다
          var mousePosition = mouseEvent.latLng;

          // 마우스 클릭으로 그려진 선의 좌표 배열을 얻어옵니다
          var path = this.clickLine.getPath();

          // 마우스 클릭으로 그려진 마지막 좌표와 마우스 커서 위치의 좌표로 선을 표시합니다
          var movepath = [path[path.length - 1], mousePosition];
          this.moveLine.setPath(movepath);
          this.moveLine.setMap(this.map);

          var distance = Math.round(this.clickLine.getLength() + this.moveLine.getLength()), // 선의 총 거리를 계산합니다
            content = '<div class="dotOverlay distanceInfo">총거리 <span class="number">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다

          // 거리정보를 지도에 표시합니다
          this.showDistance(content, mousePosition);
        }
      });
      // 지도에 마우스무브 이벤트를 등록합니다
      // 선을 그리고있는 상태에서 마우스무브 이벤트가 발생하면 그려질 선의 위치를 동적으로 보여주도록 합니다
      kakao.maps.event.addListener(this.map, 'mousemove', function (mouseEvent) {

        // 지도 마우스무브 이벤트가 발생했는데 선을 그리고있는 상태이면
        if (this.drawingFlag) {

          // 마우스 커서의 현재 위치를 얻어옵니다
          var mousePosition = mouseEvent.latLng;

          // 마우스 클릭으로 그려진 선의 좌표 배열을 얻어옵니다
          var path = this.clickLine.getPath();

          // 마우스 클릭으로 그려진 마지막 좌표와 마우스 커서 위치의 좌표로 선을 표시합니다
          var movepath = [path[path.length - 1], mousePosition];
          this.moveLine.setPath(movepath);
          this.moveLine.setMap(this.map);

          var distance = Math.round(this.clickLine.getLength() + this.moveLine.getLength()), // 선의 총 거리를 계산합니다
            content = '<div class="dotOverlay distanceInfo">총거리 <span class="number">' + distance + '</span>m</div>'; // 커스텀오버레이에 추가될 내용입니다

          // 거리정보를 지도에 표시합니다
          this.showDistance(content, mousePosition);
        }
      });
    },
    lineStop() {
      if (this.drawingFlag) {

        // 마우스무브로 그려진 선은 지도에서 제거합니다
        this.moveLine.setMap(null);
        this.moveLine = null;

        // 마우스 클릭으로 그린 선의 좌표 배열을 얻어옵니다
        var path = this.clickLine.getPath();

        // 선을 구성하는 좌표의 개수가 2개 이상이면
        if (path.length > 1) {

          // 마지막 클릭 지점에 대한 거리 정보 커스텀 오버레이를 지웁니다
          if (this.dots[this.dots.length - 1].distance) {
            this.dots[this.dots.length - 1].distance.setMap(null);
            this.dots[this.dots.length - 1].distance = null;
          }

          var distance = Math.round(this.clickLine.getLength()), // 선의 총 거리를 계산합니다
            content = this.getTimeHTML(distance); // 커스텀오버레이에 추가될 내용입니다

          // 그려진 선의 거리정보를 지도에 표시합니다
          this.showDistance(content, path[path.length - 1]);

        } else {

          // 선을 구성하는 좌표의 개수가 1개 이하이면
          // 지도에 표시되고 있는 선과 정보들을 지도에서 제거합니다.
          this.deleteClickLine();
          this.deleteCircleDot();
          this.deleteDistnce();

        }

        // 상태를 false로, 그리지 않고 있는 상태로 변경합니다
        this.drawingFlag = false;
      }
    },
    deleteClickLine() {
      if (this.clickLine) {
        this.clickLine.setMap(null);
        this.clickLine = null;
      }
    },
    showDistance(content, position) {

      if (this.distanceOverlay) { // 커스텀오버레이가 생성된 상태이면

        // 커스텀 오버레이의 위치와 표시할 내용을 설정합니다
        this.distanceOverlay.setPosition(position);
        this.distanceOverlay.setContent(content);

      } else { // 커스텀 오버레이가 생성되지 않은 상태이면

        // 커스텀 오버레이를 생성하고 지도에 표시합니다
        this.distanceOverlay = new kakao.maps.CustomOverlay({
          map: this.map, // 커스텀오버레이를 표시할 지도입니다
          content: content,  // 커스텀오버레이에 표시할 내용입니다
          position: position, // 커스텀오버레이를 표시할 위치입니다.
          xAnchor: 0,
          yAnchor: 0,
          zIndex: 3
        });
      }
    },
    deleteDistnce() {
      if (this.distanceOverlay) {
        this.distanceOverlay.setMap(null);
        this.distanceOverlay = null;
      }
    },
    displayCircleDot(position, distance) {

      // 클릭 지점을 표시할 빨간 동그라미 커스텀오버레이를 생성합니다
      var circleOverlay = new kakao.maps.CustomOverlay({
        content: '<span class="dot"></span>',
        position: position,
        zIndex: 1
      });

      // 지도에 표시합니다
      circleOverlay.setMap(this.map);

      if (distance > 0) {
        // 클릭한 지점까지의 그려진 선의 총 거리를 표시할 커스텀 오버레이를 생성합니다
        var distanceOverlay = new kakao.maps.CustomOverlay({
          content: '<div class="dotOverlay">거리 <span class="number">' + distance + '</span>m</div>',
          position: position,
          yAnchor: 1,
          zIndex: 2
        });

        // 지도에 표시합니다
        distanceOverlay.setMap(this.map);
      }

      // 배열에 추가합니다
      this.dots.push({circle: circleOverlay, distance: distanceOverlay});
    },
    // 클릭 지점에 대한 정보 (동그라미와 클릭 지점까지의 총거리)를 지도에서 모두 제거하는 함수입니다
    deleteCircleDot() {
      var i;

      for (i = 0; i < this.dots.length; i++) {
        if (this.dots[i].circle) {
          this.dots[i].circle.setMap(null);
        }

        if (this.dots[i].distance) {
          this.dots[i].distance.setMap(null);
        }
      }

      this.dots = [];
    },
    getTimeHTML(distance) {

      // 도보의 시속은 평균 4km/h 이고 도보의 분속은 67m/min입니다
      // 근데 지도 뚫고 가는 방식이라 감안하고 속도 낮춤
      var walkkTime = distance / 55 | 0;
      var walkHour = '', walkMin = '';

      // 계산한 도보 시간이 60분 보다 크면 시간으로 표시합니다
      if (walkkTime > 60) {
        walkHour = '<span class="number">' + Math.floor(walkkTime / 60) + '</span>시간 '
      }
      walkMin = '<span class="number">' + walkkTime % 60 + '</span>분'

      // 자전거의 평균 시속은 16km/h 이고 이것을 기준으로 자전거의 분속은 267m/min입니다
      // 근데 지도 뚫고 가는 방식이라 감안하고 속도 낮춤
      var bycicleTime = distance / 180 | 0;
      var bycicleHour = '', bycicleMin = '';

      // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다
      if (bycicleTime > 60) {
        bycicleHour = '<span class="number">' + Math.floor(bycicleTime / 60) + '</span>시간 '
      }
      bycicleMin = '<span class="number">' + bycicleTime % 60 + '</span>분'

      // 거리와 도보 시간, 자전거 시간을 가지고 HTML Content를 만들어 리턴합니다
      var content = '<ul class="dotOverlay distanceInfo">';
      content += '    <li>';
      content += '        <span class="label">총거리</span><span class="number">' + distance + '</span>m';
      content += '    </li>';
      content += '    <li>';
      content += '        <span class="label">도보</span>' + walkHour + walkMin;
      content += '    </li>';
      content += '    <li>';
      content += '        <span class="label">자전거</span>' + bycicleHour + bycicleMin;
      content += '    </li>';
      content += '</ul>'

      return content;
    }
    // ------------------선 그리기 끝--------------------------